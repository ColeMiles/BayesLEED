To get the library code to be callable (stuff in TLEED/v1.2/lib)
  should be trivial. f2py -c -m <libname> <libfile> should do
  the trick. But, there are nontrivial calculations done in the
  main programs (stuff in TLEED/v1.2/src).

Idea 1: Wrap the programs in TLEED/v1.2/src in functions/subroutines,
         call f2py on that. This is extra painful because the functions
         being called often read from stdin, which is not something I'll
         be able to easily emulate in python. I'd have to edit the Fortran
         code to read from files instead, which will modify lots of stuff.
         Seems awful to do.

(*) Idea 2: Quick-and-dirty way. The python script just edits FIN to change the
         coordinates after each perturbation, then runs the executable to
         produce output data / curves.

    Trying this for now for a proof-of-concept. Some notes on the current
         scaffolding: (Important to keep this updated to avoid insanity).

    Everything described on the subset of scripts/data in LaNiO3_example/

    - I made a script called run.prep-ref-calc which does all of the steps
        of run.ref-calc, but doesn't run the actual code and leaves everything
        in TLEED/work/*
    - The idea is then that a python script (to be written in here) would only
        edit TLEED/work/FIN on each perturbation.
    - Initial python script to edit FIN is based off of Jordan's code,
        run_LEED_reduced_dim.py. However, for some reason, Jordan repeats some
        of the perturbations? I.e he regresses only 8 displacements for the 10
        total layers, and repeats displacements 3 and 7. So, I do the same.
        (* talked to him: this is to make the problem slightly easier *)
    - NEED the run_refcalc/calc_rfactor functions to be producing files in
        independent directories, and cleaning up afterwards. This is so that
        we can eventually make parallel calls to them. (* done *)

To-do
============
- Make a basic Bayes Opt loop
- Figure out what the contraints are. There must be some due to the geometry of
    the unit cell (i.e. make sure atoms don't collide or leave the unit cell)
- Figure out how parallelization is going to work. Afterwards, will probably
    want to switch to MC-based acquisition functions.

